// Agent labels
def zOsAgentLabel = env.ZOS_AGENT_LABEL ? env.ZOS_AGENT_LABEL : 'SC47-agent'
def linuxAgent = 'master'

// GIT repositories
def srcGitRepo =  'git@github.ibm.com:Jt-atkins/GenappML.git'
def srcGitBranch = 'BH-release-group'
def zAppBuildGitRepo = 'git@github.ibm.com:Jt-atkins/Jt-atkins-dbb-zappbuild1.git'
def zAppBuildGitBranch = 'main'
def dbbGitRepo = 'https://github.com/IBM/dbb.git'
def dbbGitBranch = 'main'

// DBB
def dbbHome='/u/DMJTA1/dbb113'
def dbbUrl='https://9.76.61.221:9443/dbb/rest'
def dbbHlq='DMJTA1'
def dbbBuildType='-i'
def dbbGroovyzOpts= ''
def dbbBuildExtraOpts= ''
def dbbCredentialOptions='-id ADMIN -pw ADMIN'

// Artifactory
// def artiCredentialsId = 'artifactory_id'


// UCD
def ucdApplication = 'General-Insurance'
def ucdProcess = 'Deploy'
// def ucdComponent = 'GenAppComponent'
def ucdComponnet = "GeneralsAPIComponent"
def ucdComponnet2 = "GeneralsBackendComponent"
def ucdEnv = 'Test'
def ucdSite = 'UCD Test Server'

// Verbose
def verbose = false

// Private
def hasBuildFiles = true
def idzCodeReviewFlag = false
def buildVerbose = ''



pipeline {

    agent { label zOsAgentLabel }

    

    stages {
        
        stage('Prepare') {

            steps {
                script {
                    // Verbose
                    verbose = env.VERBOSE && env.VERBOSE == 'true' ? true : false
                    buildVerbose = verbose ? '-v' : ''
                    if ( verbose ) {
                        echo sh(script: 'env|sort', returnStdout: true)
                    }
				}           
			}
		}
		
        stage('Git Clone/Refresh App Repo') {
            steps {
                script {                    
                    dir('cics-genapp') {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
                        srcGitRepo = scm.getUserRemoteConfigs()[0].getUrl()
                        srcGitBranch = scm.branches[0].name
                        def scmVars = null
                        scmVars = checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]],
                                                doGenerateSubmoduleConfigurations: false,
                                                extensions: [
                                                [$class: 'SparseCheckoutPaths',
                                                   sparseCheckoutPaths:[[$class:'SparseCheckoutPath', 
                                                   path:'cics-genapp/']]]
                                                ],
                                                submoduleCfg: [],
                                                userRemoteConfigs: [[credentialsId: 'SC47SSH',
                                                                     url: srcGitRepo,
                                                                     ]]])
                    }
				}
			}
		}
        stage('Git Clone/Refresh zAppBuild') {
            steps {
                script {                    
                    dir("dbb-zappbuild") {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
                        def scmVars =
                            checkout([$class: 'GitSCM', branches: [[name: zAppBuildGitBranch]],
                              doGenerateSubmoduleConfigurations: false,
                              submoduleCfg: [],
                            userRemoteConfigs: [[credentialsId: 'SC47SSH',
                                url: zAppBuildGitRepo,
                            ]]])
                    }
				}
			}
		}
        stage('Git Clone/Refresh dbb scripts') {
            steps {
                script {                    
                    dir("dbb") {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
                        def scmVars =
                            checkout([$class: 'GitSCM', branches: [[name: dbbGitBranch]],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [
                                       [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                                          [$class:'SparseCheckoutPath', path:'Pipeline/CreateUCDComponentVersion/'],
                                          [$class:'SparseCheckoutPath', path:'Pipeline/RunIDZCodeReview/']
                                       ]]
                                    ],
                              submoduleCfg: [],
                            userRemoteConfigs: [[
                                url: dbbGitRepo,
                            ]]])
                    }
                }
            }
		}
        

        stage('DBB Build & UnitTest & Code Coverage') {
            steps {
                script{
                    def zUnitContents = []
                    def cccFolder = null
                    node( zOsAgentLabel ) {
                        if ( env.DBB_BUILD_EXTRA_OPTS != null ) {
                           dbbBuildExtraOpts = env.DBB_BUILD_EXTRA_OPTS
                        }
                        if ( env.DBB_BUILD_TYPE != null ) {
                            dbbBuildType = env.DBB_BUILD_TYPE
                        }
                        if ( env.DBB_CREDENTIAL_OPTIONS != null ) {
                            dbbCredentialOptions = env.DBB_CREDENTIAL_OPTIONS
                        }
                        if ( env.GROOVYZ_BUILD_EXTRA_OPTS != null ) {
                            dbbGroovyzOpts = env.GROOVYZ_BUILD_EXTRA_OPTS
                        }
                        def dbbZunitCccOpts = ''
                        if ( env.CCC_HOST != null && env.CCC_PORT != null && env.CCC_FOLDER != null ) {
                            dbbZunitCccOpts="-cc -cch ${env.CCC_HOST} -ccp ${env.CCC_PORT}"
                            cccFolder = env.CCC_FOLDER
                        }
                        idzCodeReviewFlag = env.RUN_IDZ_CODE_REVIEW && env.RUN_IDZ_CODE_REVIEW == 'true' ? true : false
                        dbbHome = env.DBB_HOME
                        dbbUrl = env.DBB_URL
                        dbbHlq = env.DBB_HLQ
                        sh "$dbbHome/bin/groovyz $dbbGroovyzOpts /var/jenkins-remote/workspace/Genapp-Release-Group-Pipeline/dbb-zappbuild/build.groovy --logEncoding UTF-8 -w ${WORKSPACE} --application cics-genapp --sourceDir ${WORKSPACE}/cics-genapp  --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER} --hlq ${dbbHlq}.GENAPP --url $dbbUrl $dbbCredentialOptions -d $dbbBuildType $buildVerbose $dbbZunitCccOpts $dbbBuildExtraOpts"
                        def files = findFiles(glob: "**BUILD-${BUILD_NUMBER}/**/buildList.txt")
                        // Do not enter into some steps if nothing in the build list
                        hasBuildFiles = files.length > 0 && files[0].length > 0
                        
                        def zUnitFiles = findFiles(glob: "**BUILD-${BUILD_NUMBER}/**/*.zunit.report.log")
                        zUnitFiles.each { zUnit ->
                            println "Process zUnit: $zUnit.path"
                            def zUnitContent = readFile file: zUnit.path
                            zUnitContents << zUnitContent
                        }
                    }
                    zUnitContents.each { zUnitContent ->
                        writeFile file: '/tmp/zUnit.zunit', text:zUnitContent
                        sh (returnStatus: true, script: '''#!/bin/sh
                            curl --silent https://raw.githubusercontent.com/ibm/dbb-pipeline/master/cics-genapp/zUnit/xsl/AZUZ2J30.xsl -o /tmp/AZUZ2J30.xsl
                            xsltproc /tmp/AZUZ2J30.xsl /tmp/zUnit.zunit > ${WORKSPACE}/zUnit.xml
                        ''')
                        junit "zUnit.xml"
                    }
                    if ( cccFolder != null ) {
                        env.CCC_FOLDER = cccFolder
                        sh (returnStatus: true, script: '''#!/bin/sh
                            mkdir -p ${WORKSPACE}/BUILD-${BUILD_NUMBER}
                            mv -f ${CCC_FOLDER}/*.pdf ${WORKSPACE}/BUILD-${BUILD_NUMBER}
                            mv -f ${CCC_FOLDER}/*.cczip ${WORKSPACE}/BUILD-${BUILD_NUMBER}
                        ''')
                        dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
                            archiveArtifacts allowEmptyArchive: true,
                                            artifacts: "*.pdf,*.cczip"
                                            onlyIfSuccessful: false
                        }
                    }
                }
            }
            post {
                always {
                    node( zOsAgentLabel ) {
                        dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
                            archiveArtifacts allowEmptyArchive: true,
                                            artifacts: '**/*.log,**/*.json,**/*.html',
                                            excludes: '**/*clist',
                                            onlyIfSuccessful: false
                        }
                    }
                }
                unstable {
                    script{
                         error ("zUnit tests failed!!!")
                    }
                } 
            }
        }
        
        stage("IDz Code Review") {
            when  { expression { return  idzCodeReviewFlag == true  } }
            steps {
                script{
                    if ( hasBuildFiles ) {
                        def crContent = null
                        node( zOsAgentLabel ) {
                            BUILD_OUTPUT_FOLDER = sh (script: "ls ${WORKSPACE}/BUILD-${BUILD_NUMBER}  | grep build | sort -u", returnStdout: true).trim()
                            sh "$DBB_HOME/bin/groovyz $dbbGroovyzOpts ${WORKSPACE}/dbb/Pipeline/RunIDZCodeReview/RunCodeReview.groovy --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER} -cr  ${WORKSPACE}/cics-genapp/cics-genapp/cr-rules/CodeReviewRules.dat -ccr  ${WORKSPACE}/cics-genapp/cics-genapp/cr-rules/CodeReviewRules.ccr"
                            dir ("${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER}") {
                                def crJunitFile = fileExists "CodeReviewJUNIT.xml"
                                if ( crJunitFile ) {
                                    crContent = readFile file: "CodeReviewJUNIT.xml"
                                    archiveArtifacts allowEmptyArchive: true,
                                            artifacts: '*.csv,*.xml',
                                            onlyIfSuccessful: false
                                }
                            }
                        }
                        if ( crContent ) {
                            sh "mkdir -p ${WORKSPACE}/BUILD-${BUILD_NUMBER}"
                            writeFile file: "${WORKSPACE}/BUILD-${BUILD_NUMBER}/CodeReviewJUNIT.xml", text:crContent.trim()
                            junit allowEmptyResults: true, testResults: "BUILD-${BUILD_NUMBER}/CodeReviewJUNIT.xml"
                        }
                    }
                }
            }
        }
        
        stage('UCD Package') {
            steps {
                script {
                    node( zOsAgentLabel ) { 
                        if ( hasBuildFiles ) {
                            def artiUrl = getArtifactoruUrl(env.ARTIFACTORY_URL)
                            def repositoryPath = env.ARTIFACTORY_REPO_PATH
                            def ucdBuztool = env.UCD_BUZTOOL_PATH
                            BUILD_OUTPUT_FOLDER = sh (script: "ls ${WORKSPACE}/BUILD-${BUILD_NUMBER}  | grep build | sort -u", returnStdout: true).trim()
                            dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER}") {
                                sh "$dbbHome/bin/groovyz $dbbGroovyzOpts ${WORKSPACE}/dbb/Pipeline/CreateUCDComponentVersion/dbb-ucd-packaging.groovy --buztool ${ucdBuztool} --component ${ucdComponent} --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('UCD Deploy') {
            steps {
                script{
                    if ( hasBuildFiles ) {
                        script{
                            step(
                                  [$class: 'UCDeployPublisher',
                                    deploy: [
                                        deployApp: ucdApplication,
                                        deployDesc: 'Requested from Jenkins',
                                        deployEnv: ucdEnv,
                                        deployOnlyChanged: false,
                                        deployProc: ucdProcess,
                                        deployVersions: ucdComponent + ':latest'],
                                    siteName: ucdSite])
                        }
                    }
                }
            }
        }
    }
}
