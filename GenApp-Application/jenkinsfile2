def zOsAgentLabel = env.ZOS_AGENT_LABEL ? env.ZOS_AGENT_LABEL : 'SC47-agent'

// GIT repositories
def srcGitRepo =  'git@github.ibm.com:Jt-atkins/GenappJTA.git'
//def srcGitBranch = '${DEV_BRANCH}'


// DBB
def dbbHome='/u/DMJTA1/dbb109fix'
def dbbUrl1='https://9.76.61.221:9443/dbb'
// def dbbHlq='---'
// def dbbBuildType='--impactBuild'
def dbbGroovyzOpts= ''
def dbbBuildExtraOpts= ''

// UCD
def ucdApplication = 'GenApp-Deploy'
def ucdProcess = 'Deploy'
def ucdComponent = 'GenAppComponent'
def ucdAPIComponent1 = 'Genapp.Customer.API.InquireCustomer'
def ucdEnv = 'Test'
def ucdSite = 'UCD Test Server'
def buztoolLocation = '/u/DMJTA1/ucdagent705/bin/buztool.sh'
def now = java.time.LocalDateTime.now()


// Verbose
def verbose = env.VERBOSE && env.VERBOSE == 'true' ? true : false

// Private
def hasBuildFiles = true
def buildVerbose = verbose ? '-v' : ''

// Groovyz
def groovyz = '/u/DMJTA1/dbb109fix/bin/groovyz'
def zAppBuild = '/u/DMJTA1/dbb-zappbuild'
def zApp = 'cics-genapp'
def BuildType = 'impactBuild'

//def workOutoutDir = "${WORKSPACE}/work"

def JCL_EXEC_GROOVY_SCRIPT_LOCATION="/u/DMJTA1/groovy"

def INTEGRATION_FOLDER = "cics-genapp/cics-genapp/automated-Integration-Test-Pack" 
def INTEGRATION_FILE_PATTERN = "*.json"

// def SYSOUT_FOLDER = "${USS_HOME}/vtp/work" 
def SYSOUT_FILE_PATTERN = "*.bzumsg" 
def JENKINS_AGENT_LABEL = "SC47-agent"

def isFolderExist(folderName) {
  folderExist = fileExists file: "${folderName}"
  return folderExist
}

def loadFiles(filePattern,excludes="") {
  return findFiles(glob: "${filePattern}", excludes: "${excludes}")
}

def listOfFiles
def listOfSysOutFiles
def userInputParams
def reviewYesOrNo = false
def emailAddress 
def integrationFolderNotExist = false

pipeline {
    agent {
        label zOsAgentLabel
    }
    
    	parameters {
		string (
			name: 'APPLICATION_LOAD_VALUE',
			defaultValue: 'DMJTA1.LOAD',
			description: 'Enter the application load value'
        )
		string (
			name: 'USER_LOAD_VALUE',
			defaultValue: 'DMJTA1.TEST.LOAD',
			description: 'Enter the user load value'
        )  
		string (
			name: 'USS_HOME',
			defaultValue: '/u/DMJTA1',
			description: 'Enter your USS home'
        )		
        string (
			name: 'SRC_GIT_BRANCH',
			defaultValue: 'ZPROJ-???',
			description: 'Enter your branch name'
        )
        string (
			name: 'DBBHLQ',
			defaultValue: 'RACF ID',
			description: 'Enter your user ID'
        )
	}

    stages {
        stage ('Cleanup') {
            steps {
                script {
                    dir("${WORKSPACE}/work") {
                        deleteDir()
                    }
                }
            }
        }

        stage('Git Checkout') {        
            steps {
                script {
                    dir("cics-genapp") {
                    sh "rm -f .git/info/sparse-checkout"
                    checkout([$class: 'GitSCM', branches: [[name: "${SRC_GIT_BRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'cics-genapp/']]]],
                        submoduleCfg: [],userRemoteConfigs: [[credentialsId: 'SC47SSH', 
                        url: srcGitRepo,
                    ]]])
                    }
                }
            }
        }

        
        stage("Impact Build & Unit Test") {
            steps {
                script {
                    sh "${groovyz}  ${zAppBuild}/build.groovy --workspace ${WORKSPACE}/cics-genapp --hlq ${DBBHLQ} --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER} --application ${zApp} --logEncoding UTF-8 --${BuildType} --verbose"
                    
                    //calculating the Buildoutput folder name
                    
                    BUILD_OUTPUT_FOLDER = sh (script: "ls ${WORKSPACE}/BUILD-${BUILD_NUMBER}", returnStdout: true).trim()
                    
                    dir ("${WORKSPACE}/cics-genapp/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER}") {
                        archiveArtifacts allowEmptyArchive: true, artifacts: '**/*', excludes: '*clist', onlyIfSuccessful: false
                    }
                }
            }
        }



        stage('Parse Integration Test Files from Git') {
            steps {
                script {
                    isIntegrationFolderExist = isFolderExist("${WORKSPACE}/${INTEGRATION_FOLDER}")
                    if(!isIntegrationFolderExist) {
                        println "Integration folder doesn't exist"
                        currentBuild.result = 'FAILURE'
                        // error("Job failure to due to integration folder doesn't exist.")
                    } 
                    listOfFiles = loadFiles("**/${INTEGRATION_FOLDER}/${INTEGRATION_FILE_PATTERN}")
                    println "List of fileName"
                    listOfFiles.each { fileMetaData ->
                        integrationFolderNotExist = true                    
                        println fileMetaData.name
                    }
                }
            }
        }
        

        stage('Execute Integration Test') {
            when {
                expression { integrationFolderNotExist  } 
            }               
            steps {
                script {
                listOfFiles.each { fileMetaData ->
                    println "Executing ${fileMetaData.path}"
                        try {
                            def testcaseJSON = readJSON file: "${fileMetaData.path}"
                            testcaseJSON.testCases.each { testCase -> 
                                def testCaseName = testCase.name
                                def testCaseFile = testCase.dataset
                                def testCaseDescription = testCase.description
                                def testedPrograms = []
                                testCase.transactions.each { tx ->
                                    testedPrograms.addAll(tx.programs)
                                }
                                println "TestCaseName : ${testCaseName}"
                                println "TestCaseFile : ${testCaseFile}"
                                println "TestCaseDescription : ${testCaseDescription}"
                                println "TestedPrograms : ${testedPrograms}"
                                println "ApplicationLoadValue : ${APPLICATION_LOAD_VALUE}"
                                println "UserLoadValue : ${USER_LOAD_VALUE}"
                                sh """
                                ${groovyz} "${JCL_EXEC_GROOVY_SCRIPT_LOCATION}/2vtp_jcl.groovy -p ${testCaseFile} -c ${USS_HOME}/vtp -l ${APPLICATION_LOAD_VALUE} -w ${USS_HOME}/vtp/work -u ${USER_LOAD_VALUE}"  
                                """
                            }
                        }catch(err) {
                            println "${err}"
                        }
                    }
                    stash includes: "**/${USS_HOME}/vtp/work/**", name: 'sysoutput',allowEmpty: true                          
                }
            }
        }        
    

        stage('Print Integration Test Report') {
            when {
                expression { integrationFolderNotExist  } 
            }                 
            steps {
                script {
                    def sysOut = readFile file: "/u/DMJTA1/vtp/work/VTP-Messages-1047.bzumsg", encoding: "UTF-8"
                    println sysOut
                }
            }
        }

        stage('Peer Review of Test Report') {
            when {
                expression { integrationFolderNotExist  } 
            }                 
            steps {
                script { 
                    try {
                        timeout(time: 10, unit: 'MINUTES') { // change to a convenient timeout for you
                            userInputParams = input(message: 'VTP Output Review', 
                            parameters: [
                                booleanParam(defaultValue: false, description: 'Reviewed test output but will need to deploy to Dev for manual testing?*',name: 'Yes'),
                                string(defaultValue: "", description: 'Email Address To Email VTP Test Results*',name: 'Email')
                            ])
                        }
                    } catch(err) { // timeout reached or input false
                        println "Review Timeout or Aborted"
                        userInputParams = false
                    }
                }
            }
        }

        stage('Analysing the Reviewer Input') {    
            when {
                expression { integrationFolderNotExist && userInputParams } 
            }                     
            steps {
                script { 
                    if(userInputParams.Yes != null && userInputParams.Yes != "" && userInputParams.Yes ) {
                        reviewYesOrNo = true
                    }
                    
                    //Validate the Email
                    if(userInputParams.Email != null && userInputParams.Email != "") {
                        emailAddress = userInputParams.Email
                    } else {
                        if(reviewYesOrNo) {
                            currentBuild.result = 'FAILURE'
                            error("Email address is mandatory if you choose output is 'YES'")                                 
                        }
                    }
                }
            }
        }    

        stage('Email Report') {
            when {
                expression { reviewYesOrNo  } 
            }            
            steps {
                script { 
                    println "Sending Email to ${emailAddress}"
                     emailext body: 'Test Message', subject: 'Test Subject',to: "${emailAddress}"                    
                }
            }
        }    

        stage("Package for DEV") {
		    when {
                expression { reviewYesOrNo  } 
            }
            steps {
                script {
                    sh "${groovyz} ${zAppBuild}/dbb-ucd-packaging.groovy --buztool ${buztoolLocation} --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER} --component ${ucdComponent} --versionName dev.build.${now}.${BUILD_NUMBER}"
                    dir ("${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER}") {
                        archiveArtifacts allowEmptyArchive: true,  artifacts: '**/*',  excludes: '*clist', onlyIfSuccessful: false
                    }
                }
            }
        }


        stage('UCD Deploy to DEV') {
		    when {
                expression { reviewYesOrNo  } 
            }               
            steps {
                script{
                    if ( hasBuildFiles ) {
                        step([$class: 'UCDeployPublisher', deploy: [
                            deployApp: ucdApplication,
                            deployDesc: 'Requested from Jenkins',
                            deployEnv: ucdEnv,
                            deployOnlyChanged: false,
                            deployProc: ucdProcess,
                            deployVersions: "${ucdComponent}:dev.build.${now}.${BUILD_NUMBER}"],
                            siteName: ucdSite
                        ])
                    }
                }
            }
        }
    }
}
